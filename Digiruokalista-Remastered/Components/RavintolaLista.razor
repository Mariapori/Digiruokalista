@using Digiruokalista_Remastered.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<Data.ApplicationDbContext> context


@if(ShowTitle == true && ValittuRavintola == null)
{
    <h2>Ravintolat</h2>
}
@if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false == true && UusiRavintola == null && ValittuRavintola == null)
{
    <button class="btn btn-dark mb-1" @onclick="() => UusiRavintola = new Ravintola()">Uusi ravintola</button>
}
@if(ValittuRavintola != null)
{
    <button class="btn btn-outline-danger" @onclick="() => ValittuRavintola = null">Sulje</button>
    <RavintolaKomp ravintola=ValittuRavintola></RavintolaKomp>
}
@if(ValittuRavintola == null && UusiRavintola == null)
{
    <table class="table table-striped">
        <thead class="table table-dark">
            <tr>
                <th>Nimi</th>
                <th>Y-Tunnus</th>
                @if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false == true)
                {
                   <th>Toiminnot</th> 
                }else{
                    <th></th>
                }
                
        </tr>
    </thead>
    <tbody>
            @if(Ravintolat != null & Ravintolat.Count > 0)
            {
                            @foreach (var Ravintola in Ravintolat)
        {
            <tr>
                <td class="hover" @onclick="() => ValittuRavintola = Ravintola">@Ravintola?.Nimi</td>
                <td>@Ravintola?.yTunnus</td>
                    @if(HttpContextAccessor.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier) == Ravintola?.KayttajaID)
                    {
                        <td>
                            <button class="btn btn-info" @onclick="() => UusiRavintola = Ravintola ?? new Ravintola()">Muokkaa</button>
                            <button class="btn btn-danger" @onclick="() => PoistaRavintola(Ravintola ?? new Ravintola())">Poista</button>
                        </td>
                    }
                    else
                    {
<td></td>
                    }
                   
                   
            </tr>
        }
            }

    </tbody>
</table>
}

@if(UusiRavintola != null)
{
    <button class="btn btn-outline-danger" @onclick="() => UusiRavintola = null">Sulje</button>
    <h3>Perustiedot</h3>
    <table>
        <tr>
            <th><label>Ravintolan nimi:</label></th>
            <td><input type="text" @bind=UusiRavintola.Nimi class="form-control-lg"/></td>
        </tr>
        <tr>
            <th><label>Y-Tunnus:</label></th>
            <td><input type="text" @bind=UusiRavintola.yTunnus class="form-control-lg"/></td>
        </tr>
         <tr>
            <th><label>Kaupunki:</label></th>
            <td><input type="text" @bind=UusiRavintola.Paikkakunta class="form-control-lg"/></td>
        </tr>
         <tr>
            <th><label>Puhelinnumero:</label></th>
            <td><input type="text" @bind=UusiRavintola.Puhelinnumero class="form-control-lg"/></td>
        </tr>
        <tr>
            <th></th>
            @if(UusiRavintola?.RavintolaID > 0)
            {
                <td><button @onclick="UusiRavintolaAction" class="btn btn-dark form-control-lg">Tallenna</button></td>
            }
            else
            {
                                    <td><button @onclick="UusiRavintolaAction" class="btn btn-dark form-control-lg">Luo</button></td>
            }
</tr>
    </table>
    <hr />
    <h3>Kategoriat</h3>
    <button class="btn btn-info" @onclick="() => UusiRavintola?.Kategoriat?.Add(new Kategoria())">Uusi kategoria</button>
    <table class="table">
        @if(UusiRavintola != null && UusiRavintola.Kategoriat != null)
        {
             @foreach (var kat in UusiRavintola?.Kategoriat)
       {
           <button class="btn btn-info" @onclick="() => kat?.Ruuat?.Add(new Ruoka())">Uusi ruoka</button>
           <tr>
               <th><input type="text" @bind-value=kat.Nimi/></th>
               <th>Annosnumero</th>
               <th>Ruoka</th>
           </tr>
            @if(kat != null && kat.Ruuat != null && kat.Ruuat.Count > 0)
            {
                            @foreach (var ruoka in kat?.Ruuat)
           {
           <tr>
               <td><button class="btn btn-info" @onclick="() => ruoka?.Hinnat?.Add(new Hinta())">Uusi hintaryhmä</button></td>
               <td><input type="text" @bind-value=ruoka.AnnosNro/></td>
               <td><input type="text" @bind-value=ruoka.Nimi/></td>
           </tr>
                @if(ruoka.Hinnat != null && ruoka.Hinnat.Count > 0)
                {
                @foreach (var hinta in ruoka?.Hinnat)
                {
                    <tr>
                        <td></td>
                        <td>Kuvaus:<input type="text" @bind-value=hinta.Kuvaus /></td>
                        <td>Hinta:<input type="number" @bind-value=hinta.Summa /></td>
                    </tr>
                } 
                }

            }
            }


       }
        }
       
    </table>
}

@code
{
    [Parameter]
    public bool ShowTitle { get; set; }

    private List<Ravintola> Ravintolat = null!;
    private Ravintola? ValittuRavintola = null!;
    private Ravintola? UusiRavintola = null!;

    protected override void OnInitialized()
    {
        var db = context.CreateDbContext();
        Ravintolat = db.Ravintola.Include(o => o.Kategoriat).ThenInclude(o => o.Ruuat).ThenInclude(o => o.Hinnat).ToList();
        base.OnInitialized();
    }
    void UusiRavintolaAction()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        var loggedInUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);

        if(string.IsNullOrEmpty(loggedInUserId)){
            throw new Exception("Et ole kirjautunut sisään!");
        }

        var db = context.CreateDbContext();

        if(UusiRavintola.RavintolaID > 0)
        {
            db.Ravintola.Update(UusiRavintola);
            db.SaveChanges();
            UusiRavintola = null;
            Ravintolat = db.Ravintola.Include(o => o.Kategoriat).ThenInclude(o => o.Ruuat).ThenInclude(o => o.Hinnat).ToList();
            StateHasChanged();
            return;
        }

        UusiRavintola.KayttajaID = loggedInUserId;
        db.Ravintola.Add(UusiRavintola);
        db.SaveChanges();
        UusiRavintola = null;
        Ravintolat = db.Ravintola.Include(o => o.Kategoriat).ThenInclude(o => o.Ruuat).ThenInclude(o => o.Hinnat).ToList();
        StateHasChanged();
    }
    public void PoistaRavintola(Ravintola ravintola)
    {
        var principal = HttpContextAccessor.HttpContext.User;
        var loggedInUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
        if(ravintola.KayttajaID == loggedInUserId)
        {
            var db = context.CreateDbContext();
            db.Ravintola.Remove(ravintola);
            db.SaveChanges();
            Ravintolat = db.Ravintola.Include(o => o.Kategoriat).ThenInclude(o => o.Ruuat).ThenInclude(o => o.Hinnat).ToList();
        }
        else
        {
            throw new Exception("Sinulla ei ole oikeutta tähän!");
        }
        StateHasChanged();
    }
}
